import "package:flutter_test/flutter_test.dart";
import 'package:gc_wizard/tools/games/nonogram/logic/puzzle.dart';
import 'package:gc_wizard/tools/games/nonogram/logic/strategy.dart';

void main() {
  group("Nonogram.solve:", () {
    List<Map<String, Object?>> _inputsToExpected = [
      { 'columns': [[1],[0],[1],[0],[1],[0],[1],[0],[1],[0],[1],[0],[1],[0],[1]],
        'rows': [[1, 1, 1, 1],[0],[1, 1, 1, 1]],
        'expectedOutput' : [[4, 5, 2, 8, 7, 3, 1, 6, 9], [1, 3, 7, 9, 4, 6, 5, 2, 8], [9, 8, 6, 2, 5, 1, 3, 4, 7], [3, 4, 1, 6, 2, 8, 7, 9, 5], [5, 2, 8, 7, 1, 9, 4, 3, 6], [7, 6, 9, 4, 3, 5, 2, 8, 1], [8, 1, 3, 5, 6, 4, 9, 7, 2], [2, 9, 4, 1, 8, 7, 6, 5, 3], [6, 7, 5, 3, 9, 2, 8, 1, 4]],
      },
      // { 'columns': [[4],[9],[11],[13],[4, 5],[3, 4],[3, 4, 3],[3, 4, 6],[8, 4, 8],[6, 5, 10],[2, 5, 4, 3],[9, 5, 3, 3],[11, 5, 3, 4],[12, 5, 4, 4],[18, 2, 5, 3],[4, 16, 12, 1],[3, 17, 12],[4, 18, 3, 5],[3, 19, 4, 2],[6, 10, 9, 1],[7, 10, 7, 2],[2, 9, 4, 2],[14, 2],[3, 17, 3],[4, 25, 3],[8, 27, 5],[45],[27, 12],[25, 6],[26],[26],[27],[34],[36],[8, 27],[6, 27],[2, 12, 9],[12, 6],[14, 5],[15, 5],[15, 4],[3, 4, 11, 4],[7, 4, 10, 4, 3],[3, 10, 5, 5, 3, 4],[2, 8, 5, 4, 3, 5],[1, 6, 4, 4, 1, 3, 2],[5, 6, 3, 2],[5, 7, 4, 3],[13, 8, 8],[13, 5, 3, 5],[13, 3, 3],[13, 2, 3],[3, 2, 3],[3, 3, 3],[3, 4, 5],[3, 2, 9],[4, 2, 6],[8, 2],[4]],
      //   'rows': [[1],[1, 2],[2, 7],[3, 10],[3, 11, 4],[2, 12, 3],[4, 13, 3],[5, 13, 2],[5, 12, 3],[6, 11, 3, 4],[5, 10, 4, 6],[4, 8, 3, 8],[4, 11, 3, 4, 3],[4, 12, 3, 4, 2],[4, 13, 4, 4, 3],[5, 4, 13, 5, 4, 2],[7, 5, 13, 7, 4, 2],[8, 7, 20, 4, 2],[4, 34, 4, 3],[3, 3, 29, 4, 3],[3, 2, 28, 5],[4, 2, 28, 6],[4, 1, 38],[4, 39],[5, 40],[46, 7],[13, 30, 7],[11, 6, 6, 12, 3, 4],[8, 5, 6, 13, 2, 3],[5, 5, 4, 7, 3, 3],[4, 5, 4, 7, 2, 4],[4, 5, 4, 8, 3],[4, 4, 5, 14],[2, 4, 4, 5, 11],[7, 4, 4, 5, 9],[8, 4, 4, 6, 2],[5, 4, 4, 4, 7, 2],[4, 3, 3, 3, 10],[4, 3, 4, 3, 14],[4, 6, 3, 14],[4, 6, 3, 14],[12, 3, 3],[9, 3, 3, 2],[9, 3, 3, 2],[2, 3, 4, 3, 3],[3, 3, 6],[2, 4, 5],[3, 4],[1, 8],[4]],
      //   'expectedOutput' : [[5, 1, 6, 2, 9, 4, 3, 8, 7], [9, 3, 8, 1, 6, 7, 5, 4, 2], [7, 4, 2, 3, 8, 5, 9, 1, 6], [3, 8, 1, 5, 2, 6, 7, 9, 4], [2, 6, 5, 7, 4, 9, 1, 3, 8], [4, 7, 9, 8, 1, 3, 6, 2, 5], [1, 5, 4, 9, 7, 2, 8, 6, 3], [8, 2, 7, 6, 3, 1, 4, 5, 9], [6, 9, 3, 4, 5, 8, 2, 7, 1]],
      // },
      // { 'columns': [[7, 1, 1, 5, 7],[1, 1, 3, 1, 1, 1],[1, 3, 1, 6, 2, 1, 3, 1],[1, 3, 1, 1, 2, 1, 1, 3, 1],[1, 3, 1, 1, 2, 1, 1, 3, 1],[1, 1, 1, 1, 1, 1, 1],[7, 1, 1, 1, 1, 1, 7],[2, 1, 2],[1, 1, 2, 3, 1, 2, 5],[3, 2, 2, 2, 3, 3],[2, 1, 2, 2, 1, 2, 1, 2],[1, 2, 3, 3],[1, 2, 2, 1, 2, 1, 1, 2, 1, 1],[1, 3, 2, 1, 1, 1, 1, 1],[1, 2, 4, 1, 3, 1, 4],[2, 1, 1, 3, 1, 1, 1, 1],[3, 3, 2, 1, 6, 1],[1, 3, 1, 1, 2, 2],[7, 1, 1, 1, 2],[1, 1, 2, 1, 4, 1],[1, 3, 1, 3, 8, 1],[1, 3, 1, 1, 1, 2, 1],[1, 3, 1, 2, 2, 1, 1, 1],[1, 1, 1, 1, 1, 6, 1],[7, 2, 5, 5]],
      //   'rows': [[7, 1, 1, 1, 1, 7],[1, 1, 1, 1, 1, 2, 1, 1],[1, 3, 1, 1, 3, 1, 3, 1],[1, 3, 1, 3, 3, 1, 3, 1],[1, 3, 1, 1, 1, 1, 3, 1],[1, 1, 2, 6, 1, 1],[7, 1, 1, 1, 1, 1, 7],[3, 3],[5, 4, 1, 2, 1, 1, 1, 1],[2, 1, 2, 1, 2, 1, 1, 1],[4, 1, 1, 1, 4, 1, 3],[4, 1, 1, 1, 2, 1],[3, 1, 2, 2, 4, 2, 3],[1, 1, 1, 1, 1, 1, 1, 1],[1, 1, 1, 1, 5, 1, 2, 2],[1, 1, 1, 1, 1, 2, 1],[1, 1, 1, 2, 3, 12],[1, 1, 1, 1, 2, 2],[7, 2, 1, 1, 1, 1, 2],[1, 1, 2, 1, 1, 1, 1, 1],[1, 3, 1, 2, 9, 3],[1, 3, 1, 1, 1, 3, 2, 2],[1, 3, 1, 2, 3, 1, 1],[1, 1, 4, 3, 1, 1],[7, 5, 1, 2]],
      //   'expectedOutput' : [[5, 1, 6, 2, 9, 4, 3, 8, 7], [9, 3, 8, 1, 6, 7, 5, 4, 2], [7, 4, 2, 3, 8, 5, 9, 1, 6], [3, 8, 1, 5, 2, 6, 7, 9, 4], [2, 6, 5, 7, 4, 9, 1, 3, 8], [4, 7, 9, 8, 1, 3, 6, 2, 5], [1, 5, 4, 9, 7, 2, 8, 6, 3], [8, 2, 7, 6, 3, 1, 4, 5, 9], [6, 9, 3, 4, 5, 8, 2, 7, 1]],
      // },
      // { 'columns': [[43, 43],[38, 38],[34, 14, 34],[31, 14, 31],[29, 11, 29],[27, 12, 27],[25, 13, 25],[24, 14, 24],[22, 14, 22],[21, 3, 3, 2, 21],[19, 19],[18, 18],[17, 17],[16, 16],[15, 2, 15],[14, 3, 14],[13, 4, 13],[12, 3, 12],[11, 2, 2, 11],[10, 5, 2, 10],[10, 4, 6, 10],[9, 5, 12, 9],[8, 4, 16, 8],[8, 3, 18, 8],[7, 3, 20, 7],[6, 2, 20, 6],[6, 1, 21, 6],[5, 2, 23, 5],[5, 2, 2, 24, 5],[4, 2, 3, 1, 24, 4],[4, 3, 2, 4, 25, 4],[3, 3, 3, 5, 25, 4],[3, 3, 2, 5, 25, 3],[3, 2, 3, 5, 25, 3],[2, 3, 3, 2, 4, 25, 2],[2, 2, 4, 2, 1, 2, 4, 27, 2],[2, 2, 4, 1, 2, 6, 27, 2],[2, 2, 5, 1, 5, 5, 27, 2],[1, 8, 1, 7, 33, 1],[1, 7, 6, 34, 1],[1, 6, 7, 2, 36, 2, 1],[1, 6, 7, 36, 5, 1],[1, 6, 2, 8, 1, 44, 1],[3, 2, 9, 2, 2, 46],[2, 4, 8, 2, 1, 46],[2, 6, 8, 2, 47],[6, 9, 49],[3, 1, 12, 50],[1, 4, 13, 50],[2, 3, 2, 15, 50],[19, 50],[21, 49],[19, 3, 48],[16, 4, 48],[1, 12, 4, 47],[15, 5, 46],[1, 16, 5, 45],[1, 1, 3, 14, 3, 4, 21, 16, 1],[1, 1, 16, 11, 29, 4, 2, 1],[1, 18, 12, 32, 1],[1, 1, 1, 33, 30, 1],[1, 41, 28, 1],[2, 42, 16, 8, 2],[2, 23, 21, 14, 2],[2, 22, 21, 12, 1, 2],[2, 21, 1, 34, 1, 3, 2],[3, 23, 20, 8, 6, 3],[3, 24, 6, 13, 7, 6, 3],[3, 25, 6, 11, 6, 5, 4],[4, 34, 10, 6, 4, 4],[4, 34, 8, 4, 2, 4],[5, 34, 8, 1, 5],[5, 33, 7, 5],[6, 33, 7, 6],[6, 32, 5, 6],[7, 32, 2, 7],[8, 31, 8],[8, 30, 8],[9, 30, 9],[10, 29, 10],[10, 28, 10],[11, 28, 11],[12, 28, 12],[13, 27, 13],[14, 28, 14],[15, 30, 15],[16, 31, 16],[17, 31, 17],[18, 30, 18],[19, 20, 2, 19],[21, 15, 1, 21],[22, 13, 22],[24, 12, 24],[25, 12, 1, 25],[27, 10, 27],[29, 10, 2, 29],[31, 6, 9, 32],[34, 5, 34],[38, 38],[43, 43]],
      //   'rows': [[43, 43],[38, 38],[34, 1, 34],[31, 6, 31],[29, 10, 2, 29],[27, 6, 8, 2, 1, 5, 27],[25, 5, 9, 10, 25],[24, 4, 8, 1, 11, 24],[22, 4, 9, 2, 1, 13, 22],[21, 5, 9, 2, 16, 21],[19, 4, 10, 1, 16, 19],[18, 4, 4, 20, 18],[17, 4, 2, 1, 6, 1, 22, 17],[16, 4, 3, 34, 16],[15, 5, 8, 27, 15],[14, 6, 5, 33, 14],[13, 3, 1, 4, 35, 13],[12, 3, 2, 6, 36, 12],[11, 3, 1, 2, 1, 3, 36, 11],[10, 1, 1, 2, 38, 10],[10, 2, 1, 1, 1, 38, 10],[9, 1, 2, 2, 42, 9],[8, 3, 49, 8],[8, 52, 8],[7, 56, 7],[6, 56, 6],[6, 28, 26, 6],[5, 19, 2, 5, 27, 5],[5, 12, 9, 5, 26, 5],[4, 7, 2, 8, 5, 25, 4],[4, 6, 1, 2, 6, 2, 6, 26, 4],[3, 6, 1, 2, 3, 1, 13, 25, 3],[3, 4, 1, 3, 15, 25, 3],[3, 3, 2, 43, 3],[2, 11, 1, 5, 37, 2],[2, 13, 37, 2],[2, 14, 37, 2],[2, 16, 37, 2],[1, 18, 4, 39, 1],[1, 43, 21, 5, 1],[1, 45, 20, 4, 1],[1, 47, 9, 4, 1],[1, 35, 11, 2, 8, 3, 1],[1, 37, 16, 5, 2],[1, 38, 15, 5, 2],[1, 38, 14, 4, 1, 1],[1, 39, 13, 4, 1],[1, 40, 13, 4, 2],[1, 41, 11, 3, 1],[2, 43, 8, 3, 1],[2, 43, 7, 2, 2],[2, 42, 5, 3, 2],[2, 44, 3, 2, 1],[2, 45, 2],[2, 45, 3, 2],[3, 49, 2],[3, 49, 1],[1, 3, 48, 1, 1],[1, 4, 46, 1],[1, 5, 35, 1],[1, 5, 34, 1],[1, 6, 30, 1],[2, 7, 29, 2],[2, 6, 28, 2],[2, 6, 19, 7, 2],[2, 5, 19, 6, 2],[3, 4, 19, 5, 3],[3, 4, 24, 3],[3, 4, 22, 4],[4, 3, 23, 4],[4, 4, 22, 4],[5, 3, 22, 5],[5, 3, 22, 5],[6, 1, 16, 4, 2, 6],[6, 2, 17, 4, 3, 6],[7, 1, 22, 3, 7],[8, 23, 4, 8],[8, 21, 4, 8],[9, 18, 3, 9],[10, 16, 3, 10],[10, 17, 4, 10],[11, 16, 2, 11],[12, 15, 12],[13, 14, 13],[14, 12, 14],[15, 10, 15],[16, 8, 16],[17, 6, 17],[18, 18],[19, 19],[21, 21],[22, 22],[24, 24],[25, 25],[27, 27],[29, 29],[32, 32],[34, 34],[38, 38],[43, 43]],
      //   'expectedOutput' : [[5, 1, 6, 2, 9, 4, 3, 8, 7], [9, 3, 8, 1, 6, 7, 5, 4, 2], [7, 4, 2, 3, 8, 5, 9, 1, 6], [3, 8, 1, 5, 2, 6, 7, 9, 4], [2, 6, 5, 7, 4, 9, 1, 3, 8], [4, 7, 9, 8, 1, 3, 6, 2, 5], [1, 5, 4, 9, 7, 2, 8, 6, 3], [8, 2, 7, 6, 3, 1, 4, 5, 9], [6, 9, 3, 4, 5, 8, 2, 7, 1]],
      // },
      // { 'columns': [[1], [0]],
      //   'rows': [[1], [0]],
      //   'expectedOutput' : [[5, 8, 6, 9, 2, 4, 3, 1, 7], [9, 4, 1, 3, 6, 7, 5, 8, 2], [7, 3, 2, 1, 8, 5, 9, 4, 6], [3, 2, 8, 5, 1, 6, 7, 9, 4], [4, 6, 5, 2, 7, 9, 1, 3, 8], [1, 7, 9, 8, 4, 3, 6, 2, 5], [2, 5, 4, 7, 9, 1, 8, 6, 3], [8, 1, 7, 6, 3, 2, 4, 5, 9], [6, 9, 3, 4, 5, 8, 2, 7, 1]],
      // },
      // { 'columns': [[1]],
      //   'rows': [[1]],
      //   'expectedOutput' : [[5, 1, 6, 2, 9, 4, 3, 8, 7], [9, 3, 8, 1, 6, 7, 5, 4, 2], [7, 4, 2, 3, 8, 5, 9, 1, 6], [3, 8, 1, 5, 2, 6, 7, 9, 4], [2, 6, 5, 7, 4, 9, 1, 3, 8], [4, 7, 9, 8, 1, 3, 6, 2, 5], [1, 5, 4, 9, 7, 2, 8, 6, 3], [8, 2, 7, 6, 3, 1, 4, 5, 9], [6, 9, 3, 4, 5, 8, 2, 7, 1]],
      // },
      // { 'columns': [[1], [0]],
      //   'rows': [[2], [1]],
      //   'expectedOutput' :  null , //invalid
      // },
      // { 'columns': [[2], [0]],
      //   'rows': [[2], [0]],
      //   'expectedOutput' :  null , //unsolvable
      // },
      // { 'columns': [[2], [0]],
      //   'rows': [[2], [0]],
      //   'expectedOutput' :  null , //unsolvable
      // },
    ];

    for (var elem in _inputsToExpected) {
      test('rows: ${elem['rows']}, columns: ${elem['columns']}', () {
        var puzzle = Puzzle(elem['rows'] as List<List<int>>, elem['columns'] as List<List<int>>);
        puzzle.mapData(puzzle);

        var _actual = Strategy().solve(puzzle);
        print(puzzle.state);
        // _actual.solveNonogram(10);
        // expect(_actual.solutions?[0].solution, elem['expectedOutput']);
        // expect(_actual.solutions?.length, elem['solutionCount']);
      });
    }
  });
}