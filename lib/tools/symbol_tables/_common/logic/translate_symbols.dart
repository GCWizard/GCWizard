const Map<String, String> TRANSLATIONS = {
  'apostrophe': 'quotesingle',
  'apostrophe_in': 'quoteleft',
  'apostrophe_out': 'quoteright',
  'backtick': 'grave',
  'brace_close': 'braceright',
  'brace_open': 'braceleft',
  'bracket_close': 'bracketright',
  'bracket_open': 'bracketleft',
  'caret': 'asciicircum',
  'cedille': 'cedilla',
  'cross': 'dagger',
  'dash': 'hyphen',
  'division': 'divide',
  'dot': 'period',
  'doublecross': 'daggerdbl',
  'ellipse': 'ellipsis',
  'equals': 'equal',
  'Eth1': 'Eth',
  'Eth2': 'Eth',
  'eth1': 'eth',
  'eth2': 'dcroat',
  'euro': 'Euro',
  'exclamation': 'exclam',
  'function': 'florin',
  'greaterthan': 'greater',
  'guillemet_in': 'guillemotleft',
  'guillemet_out': 'guillemotright',
  'hard_space': 'space',
  'hashtag': 'numbersign',
  'high_a': 'ordfeminine',
  'inverted_exclamation': 'exclamdown',
  'inverted_question': 'questiondown',
  'lessthan': 'less',
  'middle_dot': 'periodcentered',
  'minus': 'hyphen',
  'my': 'mu',
  'number': 'degree',
  'not': 'logicalnot',
  'one_fourth': 'onequarter',
  'one_half': 'onehalf',
  'open_pipe': 'brokenbar',
  'paragraph': 'section',
  'parentheses_open': 'parenleft',
  'parentheses_close': 'parenright',
  'parentheses': 'parenright',
  'pipe': 'bar',
  'plus_minus': 'plusminus',
  'pound': 'sterling',
  'promille': 'perthousand',
  'quotation': 'quotedbl',
  'quotation_in': 'quotedblleft',
  'quotation_out': 'quotedblright',
  'register': 'registered',
  'tilde': 'asciitilde',
  'times': 'multiply',
  'three_fourth': 'threequarters',
  'trema': 'dieresis',
  'web_at': 'at',
  'A_acute': 'Aacute',
  'A_grave': 'Agrave',
  'A_circumflex': 'Acircumflex',
  'A_ring': 'Aring',
  'A_tilde': 'Atilde',
  'A_cedille': 'Aogonek',
  'AE_together': 'AE',
  'AE_umlaut': 'Adieresis',
  'C_acute': 'Cacute',
  'C_caron': 'Ccaron',
  'C_cedille': 'Ccedilla',
  'E_acute': 'Eacute',
  'E_cedille': 'Eogonek',
  'E_circumflex': 'Ecircumflex',
  'E_grave': 'Egrave',
  'E_eth': 'Eth',
  'E_trema': 'Edieresis',
  'G_dot': 'Gdotaccent',
  'I_acute': 'Iacute',
  'I_grave': 'Igrave',
  'I_circumflex': 'Icircumflex',
  'I_trema': 'Idieresis',
  'L_slash': 'Lslash',
  'N_acute': 'Nacute',
  'N_tilde': 'Ntilde',
  'O_acute': 'Oacute',
  'O_grave': 'Ograve',
  'O_circumflex': 'Ocircumflex',
  'O_slash': 'Oslash',
  'O_tilde': 'Otilde',
  'OE_together': 'OE',
  'OE_umlaut': 'Odieresis',
  'R_acute': 'Racute',
  'S_acute': 'Sacute',
  'S_caron': 'Scaron',
  'SZ_umlaut': 'germandbls',
  'T_thorn': 'Thorn',
  'U_acute': 'Uacute',
  'U_circumflex': 'Ucircumflex',
  'U_grave': 'Ugrave',
  'U_macron': 'Umacron',
  'UE_umlaut': 'Udieresis',
  'Y_acute': 'Yacute',
  'Y_trema': 'Ydieresis',
  'Z_acute': 'Zacute',
  'Z_caron': 'Zcaron',
  'Z_dot': 'Zdotaccent',
  'a_acute': 'aacute',
  'a_circumflex': 'acircumflex',
  'a_grave': 'agrave',
  'a_ring': 'aring',
  'a_tilde': 'atilde',
  'a_cedille': 'aogonek',
  'ae_umlaut': 'adieresis',
  'ae_together': 'ae',
  'c_acute': 'cacute',
  'c_caron': 'ccaron',
  'c_cedille': 'ccedilla',
  'e_acute': 'eacute',
  'e_cedille': 'eogonek',
  'e_circumflex': 'ecircumflex',
  'e_grave': 'egrave',
  'e_eth': 'eth',
  'e_trema': 'edieresis',
  'g_dot': 'gdotaccent',
  'i_acute': 'iacute',
  'i_circumflex': 'icircumflex',
  'i_grave': 'igrave',
  'i_trema': 'idieresis',
  'l_slash': 'lslash',
  'n_tilde': 'ntilde',
  'o_acute': 'oacute',
  'o_circumflex': 'ocircumflex',
  'o_grave': 'ograve',
  'o_slash': 'oslash',
  'o_tilde': 'otilde',
  'oe_together': 'oe',
  'oe_umlaut': 'odieresis',
  'r_acute': 'racute',
  's_acute': 'sacute',
  's_caron': 'scaron',
  't_thorn': 'thorn',
  'u_acute': 'uacute',
  'u_circumflex': 'ucircumflex',
  'u_grave': 'ugrave',
  'u_macron': 'umacron',
  'ue_umlaut': 'udieresis',
  'y_acute': 'yacute',
  'y_trema': 'ydieresis',
  'z_acute': 'zacute',
  'z_caron': 'zcaron',
  'z_dot': 'zdotaccent',
  'D_dot_below': 'Ddotbelow',
  'H_dot_below': 'Hdotbelow',
  'R_dot_below': 'Rdotbelow',
  'S_dot_below': 'Sdotbelow',
  'T_dot_below': 'Tdotbelow',
  'Z_dot_below': 'Zdotbelow',
  'h_dot_below': 'hdotbelow',
  'd_dot_below': 'ddotbelow',
  'r_dot_below': 'rdotbelow',
  's_dot_below': 'sdotbelow',
  't_dot_below': 'tdotbelow',
  'z_dot_below': 'zdotbelow',
  'o_cedille': 'combiningcedilla',
  'O_cedille': 'combiningcedilla',
  'high_1': 'superscriptone',
  'high_2': 'superscripttwo',
  'high_3': 'superscriptthree',
  'k_bar_above': 'combiningmacron'
};

String translatedName(String filename) {
  if (filename.isEmpty || !filename.toLowerCase().endsWith('.png')) return '';

  String newFilename = '';
  List<String> file = filename.split('.');
  var name = file[0].trim();
  var suffix = file[1].trim();

  if (name.startsWith('_')) {
    name = name.substring(1);
  }

  if (TRANSLATIONS.containsKey(name)) {
    newFilename = TRANSLATIONS[name]!;
  } else {
    newFilename = name;
  }

  if (newFilename.substring(0, 1) == newFilename.substring(0, 1).toUpperCase()) {
    newFilename = "_" + newFilename;
  }

  return newFilename + '.' + suffix;
}